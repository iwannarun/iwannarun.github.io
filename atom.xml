<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我要稳稳的RUN&#39;s Blog</title>
  
  <subtitle>I WANNA RUN</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-01T16:55:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RUN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你好，Hexo</title>
    <link href="http://yoursite.com/2017/10/01/My-New-Post/"/>
    <id>http://yoursite.com/2017/10/01/My-New-Post/</id>
    <published>2017-10-01T15:41:47.000Z</published>
    <updated>2017-10-01T16:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>  首先，这是在Hexo的第一篇博客，那么就先来说说选择Hexo的理由。<br>  由于自己懒癌，原先的Ghost这几个月都没更新了。并非不想记录，而是每次想记点东西的时候想到Ghost写个博客需要先登录博客后台(手动输入博客域名/ghost)，接着输入账号密码(浏览器通常没存)，写的时候又要在编辑器上调整格式，发布后预览检查主题带来的显示差异…想到这总嫌麻烦就不写了。<br>  现在有了Hexo，记录博客的方式发生了质的改变。 创建一篇新的文章，本地写好MD文件，保存一下后就是类似提交文件到预置的git仓库的操作，<code>hexo deploy</code>一下就自动发布到gitpage了，这样的一套操作下来真的是如丝顺滑，颇有持续集成的感觉。<br>  至于这款博客其他的功能体验，目前单博客的配置方式就足够吸引我了。Hexo以.yml语法进行站点配置对于程序员来说是友好的。<code>gayhub.com</code>上前端大大们开源的主题看了一圈，大都还挺有新意的，可玩性会比Ghost高些。其他部分还在体验当中。</p><p> So，后续会把阿里云机器上ghost博客迁移到这里来，想想每个月省下的主机费用还可以多几买本书或者女票的口红，嗯乐滋滋。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  首先，这是在Hexo的第一篇博客，那么就先来说说选择Hexo的理由。&lt;br&gt;  由于自己懒癌，原先的Ghost这几个月都没更新了。并非不想记录，而是每次想记点东西的时候想到Ghost写个博客需要先登录博客后台(手动输入博客域名/ghost)，接着输入账号密码(浏览器通常
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编程规范:泛型的使用</title>
    <link href="http://yoursite.com/2017/09/08/pecs-producer-extends-consumer-super-de-yi-si/"/>
    <id>http://yoursite.com/2017/09/08/pecs-producer-extends-consumer-super-de-yi-si/</id>
    <published>2017-09-08T07:23:05.000Z</published>
    <updated>2017-09-08T07:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>遵守PECS(Producer Extends Consumer Super)原则</p></blockquote><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><ol><li>频繁往外读取内容的，适合用上界 Extends。</li><li>经常往里插入的，适合用下界 Super。</li></ol><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><pre><code>Java中，泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用add方 法，而&lt;? super T&gt;不能使用get方法，做为接口调用赋值时易出错。</code></pre><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><pre><code> &lt;? extends T&gt;, ? 必须是T或T的子类集合写(add)： 因为不能确定集合实例化时用的是T或T的子类，所以没有办法写。例如：List&lt;? extends Number&gt; foo = new ArrayList&lt;Number/Integer/Double&gt;()，你不能add Number，因为也可能是Integer或Double的List， 同理也不能add Integer或Double，即，extends T， 不能集合add。集合读(get)： 只能读出T类型的数据。&lt;? super T&gt;， ? 必须是T或T的父类集合写(add)： 可以add T或T的子类。集合读(get)： 不能确定从集合里读出的是哪个类型(可能是T也可能是T的父类，或者Object)，所以没有办法使用get。例如：List&lt;? super Integer&gt; foo3 = new ArrayList&lt;Integer/Number/Object&gt;(); 只能保证get出来是Object。</code></pre><p>下面是示例，test1和test2在编译时都有错误提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">package com.robert.javaspec; </div><div class="line"> </div><div class="line">import java.util.LinkedList; </div><div class="line">import java.util.List; </div><div class="line"> </div><div class="line">/** </div><div class="line">* Created by WangMeng on 2017-04-13. </div><div class="line">* FIX ME </div><div class="line">*/ </div><div class="line">public class Main &#123; </div><div class="line">  public static void main(String[] args) &#123; </div><div class="line"> </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  public void test1()&#123; </div><div class="line">      List&lt;? extends A&gt; childofa=new LinkedList&lt;&gt;(); </div><div class="line">      B b=new B(); </div><div class="line">      A a=new A(); </div><div class="line">      childofa.add(a); </div><div class="line">      childofa.add(b); </div><div class="line">      A ta= childofa.get(0); </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  public void test2()&#123; </div><div class="line">      List&lt;? super B&gt; superOfb = new LinkedList&lt;&gt;(); </div><div class="line">      B b = new B(); </div><div class="line">      A a = new A(); </div><div class="line">      superOfb.add(a); </div><div class="line">      superOfb.add(b); </div><div class="line">      A ta = superOfb.get(0); </div><div class="line">      B tb = superOfb.get(0); </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">class A &#123; </div><div class="line">  @Override </div><div class="line">  public String toString() &#123; </div><div class="line">      return &quot;A&quot;; </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">class B extends A &#123; </div><div class="line"> </div><div class="line">  @Override </div><div class="line">  public String toString() &#123; </div><div class="line">      return &quot;B&quot;; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://yq.aliyun.com/articles/181420?spm=5176.100240.searchblog.35.CUGecC" target="_blank" rel="external">转自https://yq.aliyun.com/articles/181420?spm=5176.100240.searchblog.35.CUGecC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;遵守PECS(Producer Extends Consumer Super)原则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;解释&lt;/
      
    
    </summary>
    
    
      <category term=" - Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一段批量插入sql脚本</title>
    <link href="http://yoursite.com/2017/08/03/yi-duan-pi-liang-cha-ru-sql/"/>
    <id>http://yoursite.com/2017/08/03/yi-duan-pi-liang-cha-ru-sql/</id>
    <published>2017-08-03T08:56:38.000Z</published>
    <updated>2017-08-03T08:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">i=1;</div><div class="line">MAX_INSERT_ROW_COUNT=$1;</div><div class="line">while [ $i -le $MAX_INSERT_ROW_COUNT ]</div><div class="line">do</div><div class="line">    echo &quot;INSERT INTO player (os,username,password,nickname,emoney,dataComplete,roomId,clubId,lastOnlineTime,diamond,personalizedSignature,sex,imgUrl,codeCheck,code,codeLastTime,vipType,vipValid,inSss,countryCode,inSng,isAdmin,speak_ban,ip) VALUES (&apos;1&apos;, &apos;44444$i&apos;, &apos;123456&apos;, &apos;TEST$i&apos;, &apos;100000&apos;, &apos;1&apos;, &apos;0&apos;, &apos;0&apos;, &apos;1473237255&apos;, &apos;10000&apos;, &apos;&apos;, &apos;1&apos;, &apos;&apos;, &apos;1&apos;, &apos;834162&apos;, &apos;1473237255&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;86&apos;, &apos;0&apos;, &apos;0&apos;, &apos;0&apos;, &apos;&apos;);&quot; &gt;&gt; player.sql</div><div class="line">    d=$(date +%M-%d\ %H\:%m\:%S)</div><div class="line">    echo &quot;INSERT HELLO $i @@ $d&quot;</div><div class="line">    i=$(($i+1))</div><div class="line"></div><div class="line">done</div><div class="line">exit 0</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Web常见攻击手段和维护</title>
    <link href="http://yoursite.com/2017/06/17/web/"/>
    <id>http://yoursite.com/2017/06/17/web/</id>
    <published>2017-06-17T13:12:19.000Z</published>
    <updated>2017-06-17T13:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、SQL注入攻击</strong></p><p>解决方案：</p><ol><li>前端页面校验用户的输入数据（限制用户输入的类型、范围、格式、长度等）。</li><li>后端对提交的数据进行严格校验，数据存储时不要使用“+”号拼接sql，采用预编译sql，防止注入！</li><li>使用自定义错误页，防止用户通过服务器默认的错误页面找到服务器漏洞。</li></ol><p><strong>二、XSS跨站脚本攻击</strong></p><p>攻击方式：基于DOM的XSS即通过浏览器来直接运行js脚本，无须提交服务器，从客户端的代码引起的。</p><pre><code>如：其实就是发送一个合法的地址加自己的脚本，比如：</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">www.xxx.com/search?wd=&lt;script&gt;...&lt;/script&gt;</div></pre></td></tr></table></figure><p> 受害者点击的是<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">www.xxx.com/search?wd=&lt;script&gt;...&lt;/script&gt;</div></pre></td></tr></table></figure></p><p> 链接，然后受害者的浏览网页就加入这个恶意代码。存储XSS攻击即通过输入框提交js脚本或者上传文件到服务器，从网站的数据库引起的攻击。反射XSS攻击即通过url提交js脚本到服务器，从受害人的请求发起引起的攻击。 目的：盗取用户的登陆账户密码，收集用户的cookie等敏感信息。 解决方案：后端输出页面的时候将参数进行转义。如<code>&lt;script&gt;</code>转义成 <code>&lt;script&gt;</code>过滤用户输入。 注意：xss攻击的地方很多，html、css、js都有可能会被注入威胁。 </p><p><strong>三、CSRF跨站请求伪造攻击</strong> </p><p>攻击方式：利用收集到的用户cookie或其他敏感信息，使用httpclient等工具模拟请求，盗取用户信息。 解决方案：验证HTTP Referer字段，服务器端生成一次性token，请求时验证token。 </p><p><strong>四、DoS攻击</strong></p><p>攻击方式：Ping Flood攻击即利用ping命令不停的发送的数据包到服务器，占用服务器带宽，直到网络瘫痪。SYN Flood攻击即利用tcp协议原理，伪造受害者的ip地址，一直保持与服务器的连接，导致受害者连接服务器的时候拒绝服务。 </p><p>解决方案：设置防火墙。使用阿里云高防IP。 </p><p><strong>五、ARP欺骗——常见的窃取资料的安全性问题</strong></p><p>攻击方式：利用ARP欺骗，伪造成网关，让受害者的数据经过攻击者的电脑，从而抓取别人的用户信息。 解决方案：强烈要求数据必须加密传输，启动https协议。</p><p><strong>六、中间人攻击（会话劫持）—–常见的窃取资料的安全性问题</strong></p><p>攻击方式：劫持会话cookies，把受害者（A）与受害者（B）之间通信经过攻击者的电脑。（常见于在线聊天系统） </p><p>解决方案：用户进行二次验证，随机产生会话ID，会话cookies设置httponly。 </p><p>cookies的两种类型 </p><ul><li>会话cookies : 建立会话的cookies，关闭浏览器失效。 </li><li>持久性cookies: 持久保存本地的cookies，到期失效。 会话cookies ！= session cookies会受到XSS，CSRF攻击。（把恶意代码存放到cookies里面） </li></ul><p><strong>七、其他注意的点</strong> </p><p>限制上传文件的类型和权限，防止用户上传jsp和服务器脚本！ 删除服务器默认的示例demo，如tomcat下的webapps下的默认文件！ 关注使用到的技术的更新，如：struts2的远程执行漏洞。及时更新到bug fixed版本。</p><p>转自<a href="http://www.dreamlu.net" target="_blank" rel="external">如梦技术</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、SQL注入攻击&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前端页面校验用户的输入数据（限制用户输入的类型、范围、格式、长度等）。&lt;/li&gt;
&lt;li&gt;后端对提交的数据进行严格校验，数据存储时不要使用“+”号拼接sql，采用预编译
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tomcat重新部署和备份脚本</title>
    <link href="http://yoursite.com/2017/06/06/tomcat-e9-87-8d-e5-90-af-e8-84-9a-e6-9c-ac/"/>
    <id>http://yoursite.com/2017/06/06/tomcat-e9-87-8d-e5-90-af-e8-84-9a-e6-9c-ac/</id>
    <published>2017-06-06T11:50:12.000Z</published>
    <updated>2017-06-10T02:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查询指定服务的tomcat，如果存在对应pid则进行重启，同时对历史版本war包备份</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#defined </div><div class="line">TOMCAT_HOME=&quot;/data/server/tomcat-adminstock&quot;</div><div class="line">TOMCAT_PORT=20007</div><div class="line">PROJECT=adminstock</div><div class="line"></div><div class="line"></div><div class="line">TomcatID=$(ps -ef |grep tomcat |grep -w $TOMCAT_HOME|grep -v &apos;grep&apos;|awk &apos;&#123;print $2&#125;&apos;)</div><div class="line">if [ -n $TomcatID ];</div><div class="line"></div><div class="line">       then</div><div class="line">                sudo &quot;$TOMCAT_HOME&quot;/bin/shutdown.sh  -force</div><div class="line">                echo &quot;=============tomcat shutdown=================&quot;</div><div class="line">        else</div><div class="line">                echo &quot;=============tomcat not start ===============&quot;</div><div class="line">fi</div><div class="line">#check tomcat process</div><div class="line">tomcat_pid=`/usr/sbin/lsof -n -P -t -i :$TOMCAT_PORT`</div><div class="line">echo &quot;current :&quot; $tomcat_pid</div><div class="line">while [ -n &quot;$tomcat_pid&quot; ]</div><div class="line">do</div><div class="line"> sleep 5</div><div class="line"> tomcat_pid=`/usr/sbin/lsof -n -P -t -i :$TOMCAT_PORT`</div><div class="line"> echo &quot;scan tomcat adminstock pid :&quot; $tomcat_pid</div><div class="line">done</div><div class="line">#publish project</div><div class="line">echo &quot;scan no tomcat adminstock pid,$PROJECT publishing&quot;</div><div class="line">sudo rm -rf &quot;$TOMCAT_HOME&quot;/webapps/$PROJECT*</div><div class="line">sudo cp /data/server/jenkins_slave/workspace/MN_ADMIN/adminstock/target/$PROJECT.war &quot;$TOMCAT_HOME&quot;/webapps/$PROJECT.war</div><div class="line">#bak project</div><div class="line">BAK_DIR=/data/bak/$PROJECT/`date +%Y%m%d`</div><div class="line">sudo mkdir -p &quot;$BAK_DIR&quot;</div><div class="line">sudo cp &quot;$TOMCAT_HOME&quot;/webapps/$PROJECT.war &quot;$BAK_DIR&quot;/&quot;$PROJECT&quot;_`date +%H%M%S`.war</div><div class="line">#remove tmp</div><div class="line">sudo rm -rf /data/bak/$PROJECT*.war</div><div class="line">#start tomcat</div><div class="line"></div><div class="line">cd $TOMCAT_HOME/bin/</div><div class="line">sudo ./startup.sh</div><div class="line">echo &quot;tomcat adminstock is starting,please try to access $PROJECT conslone url&quot; </div><div class="line">sleep 15</div><div class="line">echo &quot;-----------------------------adminstock-----------------------------&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;查询指定服务的tomcat，如果存在对应pid则进行重启，同时对历史版本war包备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term=" - Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常用aliases记录(持续更新)</title>
    <link href="http://yoursite.com/2017/06/02/-e5-b8-b8-e7-94-a8aliases-e8-ae-b0-e5-bd-95-e6-8c-81-e7-bb-ad-e6-9b-b4-e6-96-b0/"/>
    <id>http://yoursite.com/2017/06/02/-e5-b8-b8-e7-94-a8aliases-e8-ae-b0-e5-bd-95-e6-8c-81-e7-bb-ad-e6-9b-b4-e6-96-b0/</id>
    <published>2017-06-02T11:21:15.000Z</published>
    <updated>2017-06-07T15:08:20.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"># 文件按大小排序，</div><div class="line">lbys = ls by size alias lbys=&apos;ls -alhS&apos; </div><div class="line"># 文件按时间排序，lbyt = ls by time alias lbyt=&apos;ls -alht&apos;</div><div class="line"># 重新运行上一条命令，并将输出复制到剪贴板，</div><div class="line">cl = copy last alias </div><div class="line">cl=&apos;bash -c &quot;$(fc -ln -1)&quot; | pbcopy&apos; </div><div class="line"># 复制上一条命令 </div><div class="line">alias last=&apos;fc -ln -1 | pbcopy&apos; </div><div class="line"># 将当前剪贴板里的内容保存到某个文件里 </div><div class="line">alias new=&apos;pbpaste | cat &gt;&apos; alias save=&apos;pbpaste | cat &gt;&apos; alias myip=&apos;curl ifconfig.co&apos; </div><div class="line"># 代理 alias setproxy=&apos;export ALL_PROXY=socks5://127.0.0.1:1086&apos; alias unsetproxy=&apos;unset ALL_PROXY&apos; </div><div class="line"># life query alias tq=&quot;curl wttr.in/shenzhen&quot; </div><div class="line"># brew </div><div class="line">alias bs=&quot;brew services&quot; </div><div class="line">alias bsl=&quot;brew services list&quot; </div><div class="line"># editor </div><div class="line">alias vi=&quot;vim&quot; alias edit=&quot;vim&quot; </div><div class="line">alias grep=&quot;grep -E --color&quot; </div><div class="line">alias egrep=&quot;egrep --color=auto&quot; </div><div class="line">alias fgrep=&quot;fgrep --color=auto&quot; </div><div class="line">alias mkdir=&quot;mkdir -pv&quot; </div><div class="line">alias tf=&apos;tail -f&apos; </div><div class="line">#动态查看文件变化 </div><div class="line">alias af=&quot;awk -F &apos;\t&apos; &apos;&#123;print NF&#125;&apos;&quot; </div><div class="line">#查看文件列数，用\t分隔，最常用，其实也可以搞个通用的，接收参数 </div><div class="line">alias wl=&apos;wc -l&apos; </div><div class="line">#统计行数 </div><div class="line">alias c=&quot;clear&quot;</div><div class="line">#清屏 alias cls=&quot;clear&quot; </div><div class="line">#清屏 </div><div class="line">alias cp=&apos;cp -v&apos; </div><div class="line">alias cpr=&apos;cp -r&apos; </div><div class="line">alias mv=&apos;mv -v&apos; </div><div class="line">alias df=&quot;df -h&quot; </div><div class="line">alias du=&quot;du -h&quot; </div><div class="line">alias dus=&quot;du -s&quot;</div><div class="line">#磁盘 </div><div class="line">alias du0=&quot;du --max-depth=0&quot; </div><div class="line">alias du1=&quot;du --max-depth=1&quot; </div><div class="line">alias last=&quot;last -a&quot; </div><div class="line">alias free=&apos;free -m&apos; </div><div class="line">#Notice: install colordiff </div><div class="line">alias diff=&apos;colordiff&apos; </div><div class="line">alias vd=&apos;vimdiff&apos; </div><div class="line">#vim diff两个文件 </div><div class="line">alias tree=&apos;tree -C&apos; </div><div class="line">alias dfind=&apos;find -type d -name&apos;</div><div class="line">#查找文件夹 </div><div class="line">alias ffind=&apos;find -type f -name&apos; </div><div class="line">#查找文件 </div><div class="line">alias chux=&apos;chmod u+x&apos; </div><div class="line">#该权限 </div><div class="line"># tool </div><div class="line">alias rmpyc=&apos;find . -name &quot;*.pyc&quot; -exec rm -rf &#123;&#125; \; &gt;&gt; /dev/null 2&gt;&amp;1&apos; </div><div class="line">#递归删除目录下所有pyc </div><div class="line">alias rmlog=&apos;rm *.log;rm *.log.*&apos; </div><div class="line">alias now=&apos;date +&quot;%Y-%m-%d %T&quot;&apos; </div><div class="line"># for svn </div><div class="line">alias rmsvn=&apos;find . -name &quot;.svn&quot; -exec rm -rf &#123;&#125; \; &gt;&gt; /dev/null 2&gt;&amp;1&apos;</div><div class="line">#递归删除目录下所有.svn </div><div class="line">alias svnci=&apos;svn ci -m &quot;commit by $USER&quot; &apos; </div><div class="line">#便捷操作，适用一些不重要文件的，不建议适用哈 </div><div class="line">alias svnst=&apos;svn st&apos; </div><div class="line">#少一个空格，少一个是一个......囧 </div><div class="line"># for go </div><div class="line">alias gor=&apos;go run&apos; </div><div class="line">alias gob=&apos;go build&apos; </div><div class="line">#for tmux </div><div class="line">alias tm=&apos;tmux -2&apos; </div><div class="line">alias tmux=&apos;tmux -2&apos; </div><div class="line">alias tma=&apos;tmux -2 attach&apos; </div><div class="line">alias tmx=&apos;tmuxinator&apos; </div><div class="line"># chdir </div><div class="line">alias ..=&quot;cd ..&quot; </div><div class="line">alias cdd=&quot;cd ..&quot; </div><div class="line">alias cd..=&quot;cd ..&quot; </div><div class="line">alias ...=&quot;cd ../..&quot; </div><div class="line">alias ....=&quot;cd ../../..&quot; </div><div class="line">alias .....=&quot;cd ../../../..&quot; </div><div class="line">alias .4=&apos;cd ../../../../&apos; </div><div class="line">alias .5=&apos;cd ../../../../..&apos; </div><div class="line">alias -- -=&apos;cd -&apos; </div><div class="line">alias cds=&apos;echo &quot;`pwd`&quot; &gt; ~/.cdsave&apos; </div><div class="line">#cd save : save where i am </div><div class="line">alias cdb=&apos;cd &quot;`cat ~/.cdsave`&quot;&apos; </div><div class="line"># cd back </div><div class="line"># processes </div><div class="line">alias pg=&apos;ps -ef | grep&apos; </div><div class="line"># services </div><div class="line">alias ms=&apos;mysql -uroot --password=&quot;&quot;&apos; </div><div class="line">#mysql alias ssh=&apos;ssh -2&apos;</div><div class="line"># ls for mac </div><div class="line">alias ll=&apos;ls -al&apos; </div><div class="line">#ls相关，这里--color需要根据终端设 </div><div class="line">alias lx=&apos;ls -lhBX&apos; </div><div class="line">#sort by extension </div><div class="line">alias lz=&apos;ls -lhrS&apos; </div><div class="line">#sort by size </div><div class="line">alias lt=&apos;ls -lhrt&apos; </div><div class="line">#sort by date 最常用到，ls -rt，按修改时间查看目录下文件 alias lsd=&apos;find . -maxdepth 1 -type d | sort&apos; </div><div class="line">#列出所有目录 </div><div class="line">alias sl=&apos;ls&apos; </div><div class="line"># net alias pong=&apos;ping -c 5 &apos; </div><div class="line">#ping，限制 </div><div class="line">alias ports=&apos;netstat -tulanp&apos; </div><div class="line">alias myip=&apos;curl ifconfig.me&apos; </div><div class="line"># useful functions </div><div class="line">#根据文件类型解压 </div><div class="line">#extract()&#123; ext()&#123; if [ -f $1 ]; then case $1 in *.tar.bz2) tar xjf $1 ;; *.tar.gz) tar xzf $1 ;; *.bz2) bunzip2 $1 ;; *.rar) unrar e $1 ;; *.gz) gunzip $1 ;; *.tar) tar xf $1 ;; *.tbz2) tar xjvf $1 ;; *.tgz) tar xzvf $1 ;; *.zip) unzip $1 ;; *.Z) uncompress $1 ;; *.7z) 7z x $1 ;; *) echo &quot;&apos;$1&apos; cannot be extracted via extract()&quot; ;; esac else echo &quot;&apos;$1&apos; is not a valid file&quot; fi &#125; #压缩 mktar()&#123; tar cvf &quot;$&#123;1%%/&#125;.tar&quot; &quot;$&#123;1%%/&#125;/&quot;; &#125; mktgz()&#123; tar cvzf &quot;$&#123;1%%/&#125;.tar.gz&quot; &quot;$&#123;1%%/&#125;/&quot;; &#125; mktbz()&#123; tar cvjf &quot;$&#123;1%%/&#125;.tar.bz2&quot; &quot;$&#123;1%%/&#125;/&quot;; &#125; </div><div class="line">#分屏同时打开多个文件 </div><div class="line">#vim -oN filea fileb filec vo()&#123; vim -o$# $* &#125; </div><div class="line">#创建一个目录并跳转到 </div><div class="line">#make a dir and cd into it mcd()&#123; mkdir -pv &quot;$@&quot; cd &quot;$@&quot; &#125; </div><div class="line">#保存一个文件到tmp </div><div class="line"># save a file to ~/tmp saveit() &#123; cp $1 $&#123;HOME&#125;/tmp/$&#123;1&#125;.saved &#125; </div><div class="line">#交换两个文件 </div><div class="line"># switch two files (comes in handy) switchfile() &#123; mv $1 $&#123;1&#125;.tmp &amp;&amp; mv $2 $1 &amp;&amp; mv $&#123;1&#125;.tmp $2 &#125; </div><div class="line">#查看自己常用命令top n </div><div class="line"># View most commonly used commands. depends on your history output format </div><div class="line">used()&#123; if [ $1 ] then history | awk &apos;&#123;print $4&#125;&apos; | sort | uniq -c | sort -nr | head -n $1 else history | awk &apos;&#123;print $4&#125;&apos; | sort | uniq -c | sort -nr | head -n 10 fi &#125; </div><div class="line">#最常用，复制一个路径过来时，不用修改，可以到达路径的最深一层目录 </div><div class="line">#if dir,cd into it. if file ,cd into where the file is </div><div class="line">goto()&#123; [ -d &quot;$1&quot; ] &amp;&amp; cd &quot;$1&quot; || cd &quot;$(dirname &quot;$1&quot;)&quot;; &#125; </div><div class="line">#临时文件 </div><div class="line">mvtmp()&#123; mv $1 ~/tmp/ &#125; function cptmp()&#123; cp -r $1 ~/tmp/ &#125; </div><div class="line"># Serve directory on localhost:80 servedir()&#123; sudo python -m SimpleHTTPServer 80 &#125; </div><div class="line"># applications </div><div class="line"># aira2 </div><div class="line">alias download=&apos;aria2c&apos; </div><div class="line">alias dl=&apos;aria2c&apos; </div><div class="line"># thefuck </div><div class="line"># tmp </div><div class="line">alias jj=&quot;~/workspace/bin/gossh&quot; </div><div class="line">alias spi=&quot;sudo /usr/local/bin/pip install&quot; </div><div class="line">alias jjj=&quot;~/bin/kw3gossh&quot; </div><div class="line"># install https://github.com/what-studio/profiling alias pypro=&apos;python -m profiling profile&apos; </div><div class="line"># install promptpython alias pt=&apos;ptpython&apos;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
    
      <category term=" - Linux - 效率工具" scheme="http://yoursite.com/tags/Linux-%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Kafka集群搭建及简介</title>
    <link href="http://yoursite.com/2017/06/02/kafka-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba-e5-8f-8a-e7-ae-80-e4-bb-8b/"/>
    <id>http://yoursite.com/2017/06/02/kafka-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba-e5-8f-8a-e7-ae-80-e4-bb-8b/</id>
    <published>2017-06-02T09:54:16.000Z</published>
    <updated>2017-06-07T15:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka集群搭建"><a href="#Kafka集群搭建" class="headerlink" title="Kafka集群搭建"></a>Kafka集群搭建</h2><h3 id="需要集群的服务器上各自下载安装程序"><a href="#需要集群的服务器上各自下载安装程序" class="headerlink" title="需要集群的服务器上各自下载安装程序"></a>需要集群的服务器上各自下载安装程序</h3><pre><code>wget https://www.apache.org/dyn/closer.cgi?path=/kafka/0.10.2.1/kafka_2.12-0.10.2.1.tgz tar -xzvf kafka_2.12-0.10.2.1.tgz</code></pre><h3 id="分别修改server-properties"><a href="#分别修改server-properties" class="headerlink" title="分别修改server.properties"></a>分别修改server.properties</h3><pre><code>broker.id=0（1、2、3...） zookeeper.connect=192.168.199.248:2181,192.168.199.170:2181,192.168.199.146:2181</code></pre><h3 id="使用守护进程方式运行"><a href="#使用守护进程方式运行" class="headerlink" title="使用守护进程方式运行"></a>使用守护进程方式运行</h3><pre><code>bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</code></pre><hr><h1 id="Kafka的特性"><a href="#Kafka的特性" class="headerlink" title="Kafka的特性"></a>Kafka的特性</h1><ul><li>高吞吐量、低延迟：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒</li><li>可扩展性：kafka集群支持热扩展</li><li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li><li>容错性：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）</li><li>高并发：支持数千个客户端同时读写</li></ul><h1 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h1><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p> Kafka集群包含一个或多个服务器，这种服务器被称为broker ### Topic</p><p> 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处） <img src="http://o6qknsods.bkt.clouddn.com/markdown-f9ff2c32307a85372679bc7859fbbede.png-960.jpg" alt=""></p><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p> Parition是物理上的概念，每个Topic包含一个或多个Partition.每个partition物理上对应一个文件夹，该文件夹存储该partition的所有消息和索引文件。 正因为消息是以文件的形式存储的，所以无论消息是否被消费，kafka都会保留所有消息，有两种策略可以删除旧数据： &gt; 基于时间：log.retention.hours=168 基于大小：log.retention.bytes=1073741824</p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p> 如果一个topic的名称为”my_topic”,有3个partitions，那么每个partitions 都分别对应有一个目录 my_topic_0、my_topic_1、my_topic_2；每个目录里放着具体的数据文件：消息跟索引文件。 ### Producer</p><p> 负责发布消息到Kafka broker 一般情况下存在三种情况： 1. At most once 消息可能会丢，但绝不会重复传输；</p><ol><li>At least one 消息绝不会丢，但可能会重复传输；</li><li>Exactly once 每条消息肯定会被传输一次且仅传输一次； 当 producer 向 broker 发送消息时，一这条消息被 commit，由于 replication 的存在，它就不会丢。但是如果 producer 发送数据给 broker 后，遇到网络问题而造成通信中断，那 Producer 就无法判断该条消息是否已经 commit。虽然 Kafka 无法确定网络故障期间发生了什么，但是 producer 可以生成一种类似于主键的东西，发生故障时幂等性的重试多次，这样就做到了 Exactly once，但目前还并未实现。所以目前默认情况下一条消息从 producer 到 broker 是确保了 At least once，可通过设置 producer 异步发送实现At most once。</li></ol><h4 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h4><p> producer 发送消息到 broker 时，会根据分区算法选择将其存储到哪一个 partition。其路由机制为： 1. 指定了 patition，则直接使用；</p><ol><li>未指定 patition 但指定 key，通过对 key 的 value 进行hash 选出一个 patition；默认情况下，Kafka根据传递消息的key来进行分区的分配，即hash(key)%numPartitions，这就保证了相同key的消息一定会被路由到相同的分区</li><li><p>patition 和 key 都未指定，使用轮询选出一个 patition。 Kafka几乎就是随机找一个分区发送无key的消息，然后把这个分区号加入到缓存中以备后面直接使用——当然了，Kafka本身也会清空该缓存（默认每10分钟或每次请求topic元数据时）</p><p>如果你的分区数是N，那么最好线程数也保持为N，这样通常能够达到最大的吞吐量。 ### Consumer</p><p>消息消费者，向Kafka broker读取消息的客户端。 ### Consumer Group</p><p>kafka中消费者组有两个概念：<strong>队列</strong>：消费者组（consumer group）允许同名的消费者组成员瓜分处理。<strong>发布-订阅</strong>：允许你广播消息给多个消费者组（不同名）。每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。 ### 分布式</p><p>每个服务器处理它分到的分区。 根据配置每个分区还可以复制到其它服务器作为备份容错。 每个分区有一个leader，零或多个follower。Leader处理此分区的所有的读写请求，而follower被动的复制数据。如果leader宕机，其它的一个follower会被推举为新的leader。 一台服务器可能同时是一个分区的leader，另一个分区的follower。 这样可以平衡负载，避免所有的请求都只让一台或者某几台服务器处理。 </p><h1 id="Kafka拓扑结构"><a href="#Kafka拓扑结构" class="headerlink" title="Kafka拓扑结构"></a>Kafka拓扑结构</h1></li></ol><p><img src="http://o6qknsods.bkt.clouddn.com/markdown-dd2a4f4f389acba188a2639d08cb2f1c.png-960.jpg" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一个典型的kafka集群中包含若干producer（可以是web前端产生的page view，或者是服务器日志，系统CPU、memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干consumer group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在consumer group发生变化时进行rebalance。producer使用push模式将消息发布到broker，consumer使用pull模式从broker订阅并消费消息。</div></pre></td></tr></table></figure></p><h1 id="消费示例"><a href="#消费示例" class="headerlink" title="消费示例"></a>消费示例</h1><p><img src="http://o6qknsods.bkt.clouddn.com/markdown-0901b900874a3846830faebab7c5ee19.png-960.jpg" alt=""> 通常来讲，消息模型可以分为两种， <strong>队列</strong>和<strong>发布-订阅式</strong>。 队列的处理方式是 一组消费者从服务器读取消息，一条消息只有其中的一个消费者来处理。在发布-订阅模型中，消息被广播给所有的消费者，接收到消息的消费者都可以处理此消息。Kafka为这两种模型提供了单一的消费者抽象模型： 消费者组 （consumer group）。 消费者用一个消费者组名标记自己。 一个发布在Topic上消息被分发给此消费者组中的一个消费者。 假如所有的消费者都在一个组中，那么这就变成了queue模型。 假如所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型。 更通用的， 我们可以创建一些消费者组作为逻辑上的订阅者。每个组包含数目不等的消费者， 一个组内多个消费者可以用来扩展性能和容错。正如上图所示： <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2个kafka集群托管4个分区（P0-P3），2个消费者组，消费组A有2个消费者实例，消费组B有4个。</div></pre></td></tr></table></figure></p><h1 id="kafka-broker宕机-amp-leader选举机制"><a href="#kafka-broker宕机-amp-leader选举机制" class="headerlink" title="kafka broker宕机 &amp; leader选举机制"></a>kafka broker宕机 &amp; leader选举机制</h1><p>为了保证高可用，每个分区都会有一定数量的副本（replica）。这样如果有部分服务器不可用，副本所在的服务器就会接替上来，保证应用的持续性。但是，为了保证较高的处理效率，消息的读写都是在固定的一个副本上完成。这个副本就是所谓的Leader，而其他副本则是Follower。而Follower则会定期地到Leader上同步数据。 如果某个分区所在服务器宕机了，那么kafka会从该分区的其他副本中选择一个作为新的leader，之后所有的读写就转移到这个新的leader上来。 因此，leader的server承载了全部的请求压力,因此从集群的整体考虑,有多少个partitions就意味着有多少个”leader”,kafka会将”leader”均衡的分散在每个实例上,来确保整体的性能稳定. </p><h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><p> Kafka会在Zookeeper上针对每个Topic维护一个称为ISR（in-sync replica，已同步的副本）的集合，该集合中是一些分区的副本。只有当这些副本都跟Leader中的副本同步了之后，kafka才会认为消息已提交，并反馈给消息的生产者。如果这个集合有增减，kafka会更新zookeeper上的记录。 如果某个分区的Leader不可用，Kafka就会从ISR集合中选择一个副本作为新的Leader。如果只允许一台机器失败，那么需要两个副本，只允许两台机器失败，则需要三个副本。 这里有一种极端的情况：所有的ISR副本都失败了，此时有两种方法可选，一种是等待ISR集合中的副本复活，一种是选择任何一个立即可用的副本，而这个副本不一定是在ISR集合中。&gt; 第一种：如果要等待ISR副本复活，虽然可以保证一致性，但可能需要很长时间。第二种如果选择立即可用的副本，则很可能该副本并不一致。</p><p>1.每个线程的一个消费者一个简单的选择是给每个线程自己的消费者实例。<br>     以下是这种方法的优点和缺点：<br>     PRO：最简单的实现PRO：它通常是最快的，因为不需要线程间协调PRO：它使每个分区的按顺序处理非常易于实现（每个线程都按照接收它们的顺序处理消息）。<br>     CON：更多的消费者意味着更多的TCP连接到集群（每个线程一个）。一般来说，卡夫卡非常有效地处理连接，所以这通常是一个很小的成本。 CON：多个消费者意味着更多的请求被发送到服务器，稍微少一点的数据批处理可能会导致I / O吞吐量的下降。 CON：所有进程的总线程数将受到分区总数的限制。 </p><p>2.消除和处理解耦另一种方法是让一个或多个消费者线程执行所有数据消耗，并将ConsumerRecords实例移交给实际处理记录处理的处理器线程池消耗的阻塞队列。<br>    此选项同样具有优点和缺点：<br>    PRO：该选项允许独立扩展消费者和处理器的数量。这使得可以让单个消费者提供许多处理器线程，避免对分区的任何限制。<br>    CON：跨处理器的保证顺序需要特别小心，因为线程将独立执行，因为稍后的数据块可能会由于线程执行时间的运行而在之前的数据块中被处理。对于没有订购要求的处理，这不是问题。<br>    CON：手动提交的位置变得更加困难，因为它要求所有线程协调，以确保该分区的处理完成。这种方法有很多可能的变化。例如，每个处理器线程可以具有自己的队列，并且消费者线程可以使用TopicPartition散列到这些队列中，以确保按顺序消费并简化提交。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kafka集群搭建&quot;&gt;&lt;a href=&quot;#Kafka集群搭建&quot; class=&quot;headerlink&quot; title=&quot;Kafka集群搭建&quot;&gt;&lt;/a&gt;Kafka集群搭建&lt;/h2&gt;&lt;h3 id=&quot;需要集群的服务器上各自下载安装程序&quot;&gt;&lt;a href=&quot;#需要集群的服务器
      
    
    </summary>
    
    
      <category term=" - Linux - 消息队列" scheme="http://yoursite.com/tags/Linux-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper集群搭建(三台)</title>
    <link href="http://yoursite.com/2017/06/02/zookeeper-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba-e4-b8-89-e5-8f-b0/"/>
    <id>http://yoursite.com/2017/06/02/zookeeper-e9-9b-86-e7-be-a4-e6-90-ad-e5-bb-ba-e4-b8-89-e5-8f-b0/</id>
    <published>2017-06-02T09:52:55.000Z</published>
    <updated>2017-06-07T13:09:55.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term=" - Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux定时删除日志文件执行脚本</title>
    <link href="http://yoursite.com/2017/05/22/linux-e5-ae-9a-e6-97-b6-e5-88-a0-e9-99-a4-e6-97-a5-e5-bf-97-e6-96-87-e4-bb-b6-e6-89-a7-e8-a1-8c-e8-84-9a-e6-9c-ac/"/>
    <id>http://yoursite.com/2017/05/22/linux-e5-ae-9a-e6-97-b6-e5-88-a0-e9-99-a4-e6-97-a5-e5-bf-97-e6-96-87-e4-bb-b6-e6-89-a7-e8-a1-8c-e8-84-9a-e6-9c-ac/</id>
    <published>2017-05-22T14:25:44.000Z</published>
    <updated>2017-06-07T15:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>linux是一个很能自动产生文件的系统，日志、邮件、备份等。虽然现在硬盘廉价，我们可以有很多硬盘空间供这些文件浪费，让系统定时清理一些不需要的文件很有一种爽快的事情。不用你去每天惦记着是否需要清理日志，不用每天收到硬盘空间不足的报警短信，想好好休息的话，让我们把这个事情交给机器定时去执行吧。 </p></blockquote><p><strong>1.删除文件命令</strong> </p><pre><code>find 对应目录 -mtime +天数 -name &quot;文件名&quot; -exec rm -rf {} \; </code></pre><p><strong>实例命令：</strong></p><pre><code>find /opt/soft/log/ -mtime +30 -name &quot;*.log&quot; -exec rm -rf {} \; </code></pre><p>说明： 将/opt/soft/log/目录下所有30天前带”.log”的文件删除。</p><p>具体参数说明如下： </p><ul><li><code>find</code>：linux的查找命令，用户查找指定条件的文件； </li><li><code>/opt/soft/log/</code>：想要进行清理的任意目录； </li><li><code>-mtime</code>：标准语句写法； </li><li><code>+30</code>：查找30天前的文件，这里用数字代表天数； </li><li><code>&quot;*.log&quot;</code>：希望查找的数据类型，”<em>.jpg”表示查找扩展名为jpg的所有文件，”</em>“表示查找所有文件，这个可以灵活运用，举一反三； </li><li><code>-exec</code>：固定写法；</li><li><code>rm -rf</code>：强制删除文件，包括目录；</li><li><code>{} \;</code>：固定写法，一对大括号+空格++; </li></ul><p><strong>2.计划任务</strong> </p><p>若嫌每次手动执行语句太麻烦，可以将这小语句写到一个可执行shell脚本文件中，再设置cron调度执行，那就可以让系统自动去清理相关文件。 </p><p><strong>2.1创建shell：</strong><br>    touch /opt/soft/bin/auto-del-30-days-ago-log.sh chmod +x auto-del-30-days-ago-log.sh 新建一个可执行文件auto-del-30-days-ago-log.sh，并分配可运行权限 </p><p><strong>2.2编辑shell脚本：</strong> </p><p>vi auto-del-30-days-ago-log.sh 编辑auto-del-30-days-ago-log.sh文件如下：</p><p> #!/bin/sh<br> find /opt/soft/log/ -mtime +30 -name “*.log” -exec rm -rf {} \; ok，保存退出(:wq)。 2.3计划任务： </p><p> #crontab -e<br> 将auto-del-30-days-ago-log.sh执行脚本加入到系统计划任务，到点自动执行 输入： 10 0 <em> </em> * /opt/soft/log/auto-del-7-days-ago-log.sh &gt;/dev/null 2&gt;&amp;1 这里的设置是每天凌晨0点10分执行auto-del-7-days-ago-log.sh文件进行数据清理任务了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;linux是一个很能自动产生文件的系统，日志、邮件、备份等。虽然现在硬盘廉价，我们可以有很多硬盘空间供这些文件浪费，让系统定时清理一些不需要的文件很有一种爽快的事情。不用你去每天惦记着是否需要清理日志，不用每天收到硬盘空间不足的报警短信，想好好休息
      
    
    </summary>
    
    
      <category term=" - Linux - 日志收集" scheme="http://yoursite.com/tags/Linux-%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>TCP连接的报文到达确认机制</title>
    <link href="http://yoursite.com/2017/05/09/tcp-e8-bf-9e-e6-8e-a5-e7-9a-84-e6-8a-a5-e6-96-87-e5-88-b0-e8-be-be-e7-a1-ae-e8-ae-a4-e6-9c-ba-e5-88-b6/"/>
    <id>http://yoursite.com/2017/05/09/tcp-e8-bf-9e-e6-8e-a5-e7-9a-84-e6-8a-a5-e6-96-87-e5-88-b0-e8-be-be-e7-a1-ae-e8-ae-a4-e6-9c-ba-e5-88-b6/</id>
    <published>2017-05-08T20:09:31.000Z</published>
    <updated>2017-06-07T13:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用<code>tcpdump</code>命令查看Netty建立TCP连接时，报文数据的流向，如图</p><p><img src="http://o6qknsods.bkt.clouddn.com/markdown-41e512ecf3e2f9a297c22c143d835fb8.png-960.jpg" alt=""></p><ul><li><em>ACK</em>: 是对接收到的数据的最高序列号的确认，并向发送端返回一个下次接收时期望的TCP数据包的序列号（Ack Number）。例如， 主机A发送的当前数据序号是400，数据长度是100，则接收端收到后会返回一个确认号是500的确认号给主机A。</li><li><em>SEQ</em>: TCP会话的每一端都包含一个32位（bit）的序列号，该序列号被用来跟踪该端发送的数据量。每一个包中都包含序列号，在接收端则通过确认号用来通知发送端数据成功接收。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用&lt;code&gt;tcpdump&lt;/code&gt;命令查看Netty建立TCP连接时，报文数据的流向，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o6qknsods.bkt.clouddn.com/markdown-41e512ecf3e2f9a297c22c143d8
      
    
    </summary>
    
    
      <category term=" - 网络协议" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Docker 修改默认的镜像存储位置</title>
    <link href="http://yoursite.com/2017/05/03/docker--e4-bf-ae-e6-94-b9-e9-bb-98-e8-ae-a4-e7-9a-84-e9-95-9c-e5-83-8f-e5-ad-98-e5-82-a8-e4-bd-8d-e7-bd-ae/"/>
    <id>http://yoursite.com/2017/05/03/docker--e4-bf-ae-e6-94-b9-e9-bb-98-e8-ae-a4-e7-9a-84-e9-95-9c-e5-83-8f-e5-ad-98-e5-82-a8-e4-bd-8d-e7-bd-ae/</id>
    <published>2017-05-02T16:14:17.000Z</published>
    <updated>2017-06-07T13:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份-amp-文件同步"><a href="#备份-amp-文件同步" class="headerlink" title="备份&amp;文件同步"></a>备份&amp;文件同步</h2><p> 首先，备份 <code>fstab</code> 文件，文件位于 <code>/etc/fstab</code></p><pre><code>sudo cp /etc/fstab /etc/fstab.$(date +%Y-%m-%d) </code></pre><h2 id="关闭-docker-服务，用-rsync-同步-var-lib-docker到新位置"><a href="#关闭-docker-服务，用-rsync-同步-var-lib-docker到新位置" class="headerlink" title="关闭 docker 服务，用 rsync 同步 /var/lib/docker到新位置."></a>关闭 docker 服务，用 rsync 同步 /var/lib/docker到新位置.</h2><pre><code>yum -y intall rsync service docker stop mkdir /data/docker rsync -aXS /var/lib/docker/. /data/docker/</code></pre><p> 花费时间取决于<code>/var/lib/docker</code>的大小，建议在装docker后立即修改默认的镜像存储路径，等到了系统盘饱满就尴尬了，这里是有过惨痛经历。 </p><blockquote><p>docker的安装方式最好根据官方的文档安装docker社区版(CE)，能少填一些坑。 </p></blockquote><h2 id="修改fstab-amp-重新挂载"><a href="#修改fstab-amp-重新挂载" class="headerlink" title="修改fstab &amp; 重新挂载"></a>修改fstab &amp; 重新挂载</h2><p> 在该文件中把下面一行添加到 <code>fstab</code> 里，将新位置挂载到 </p><pre><code>/var/lib/docker /data/docker /var/lib/docker none bind 0 0</code></pre><h2 id="然后重新挂载"><a href="#然后重新挂载" class="headerlink" title="然后重新挂载"></a>然后重新挂载</h2><pre><code>mount –a</code></pre><h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><pre><code>df /var/lib/docker/</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备份-amp-文件同步&quot;&gt;&lt;a href=&quot;#备份-amp-文件同步&quot; class=&quot;headerlink&quot; title=&quot;备份&amp;amp;文件同步&quot;&gt;&lt;/a&gt;备份&amp;amp;文件同步&lt;/h2&gt;&lt;p&gt; 首先，备份 &lt;code&gt;fstab&lt;/code&gt; 文件，文件位于 
      
    
    </summary>
    
    
      <category term=" - Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>GitLab持续集成之gitlab-runner构建使用</title>
    <link href="http://yoursite.com/2017/05/02/gitlab-e6-8c-81-e7-bb-ad-e9-9b-86-e6-88-90-e4-b9-8bgitlab-runner-e9-95-9c-e5-83-8f-e6-9e-84-e5-bb-ba/"/>
    <id>http://yoursite.com/2017/05/02/gitlab-e6-8c-81-e7-bb-ad-e9-9b-86-e6-88-90-e4-b9-8bgitlab-runner-e9-95-9c-e5-83-8f-e6-9e-84-e5-bb-ba/</id>
    <published>2017-05-02T15:59:56.000Z</published>
    <updated>2017-06-17T15:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://o6qknsods.bkt.clouddn.com/markdown-3a734ea26c4fbb74395328385a3d25c9.png-960.jpg" alt=""></p><h2 id="安装gitlab-runner"><a href="#安装gitlab-runner" class="headerlink" title="安装gitlab-runner"></a>安装gitlab-runner</h2><p> 官方推荐使用包管理工具安装的方式，推荐使用清华的镜像：<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ci-multi-runner/" target="_blank" rel="external">Gitlab CI Multi Runner </a><br> 对于需要安装历史版本的可以从这里找：<br> <a href="https://packages.gitlab.com/runner/gitlab-ci-multi-runner" target="_blank" rel="external">传送门</a></p><p> 本文将更多去介绍采用docker构建镜像的方式去run一个安装了gitlab-runner的容器。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p> 由于自用Gitlab的版本比较低，需要找低版本的gitlab-runner，而官方对centOS7的支持不是太友好的感觉，折腾了两天没搞好centOS下的镜像。所以乌邦图将就用一下，达到目的就好。 附兼容表：<br>  <img src="http://o6qknsods.bkt.clouddn.com/markdown-66704eefd742458ae7704ed77fe8078e.png-960.jpg" alt=""></p><h2 id="Dockerfile-基于Ubuntu14-04的镜像-Docker-JDK8-Gradle"><a href="#Dockerfile-基于Ubuntu14-04的镜像-Docker-JDK8-Gradle" class="headerlink" title="Dockerfile(基于Ubuntu14.04的镜像 Docker JDK8 Gradle)"></a>Dockerfile(基于Ubuntu14.04的镜像 Docker JDK8 Gradle)</h2><pre><code>FROM ubuntu:14.04ADD dumb-init_1.0.2_amd64 /usr/bin/dumb-initRUN chmod +x /usr/bin/dumb-initRUN apt-get update -y &amp;&amp; \apt-get upgrade -y &amp;&amp; \apt-get install -y ca-certificates wget git apt-transport-https curl vim nano software-properties-common python-software-propertiesCOPY gitlab-ci-multi-runner_amd64.deb /tmp/RUN dpkg -i /tmp/gitlab-ci-multi-runner_amd64.deb; \apt-get update &amp;&amp;  \apt-get -f install -y &amp;&amp; \apt-get clean &amp;&amp; \rm -rf /var/lib/apt/lists/* &amp;&amp; \rm /tmp/gitlab-ci-multi-runner_amd64.deb &amp;&amp; \gitlab-runner --version &amp;&amp; \mkdir -p /etc/gitlab-runner/certs &amp;&amp; \chmod -R 700 /etc/gitlab-runner# 安装DockerRUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -RUN add-apt-repository \   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \   $(lsb_release -cs) \   stable&quot;RUN apt-get update -yRUN apt-get -y install docker-ceRUN  apt-get clean &amp;&amp; \rm -rf /var/lib/apt/lists/    # 安装jdk8RUN apt-get update &amp;&amp; apt-get -y upgrade &amp;&amp; apt-get -y install software-properties-common &amp;&amp; add-apt-repository ppa:webupd8team/java -y &amp;&amp; apt-get updateRUN (echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections) &amp;&amp; apt-get install -y oracle-java8-installer oracle-java8-set-defaultENV JAVA_HOME /usr/lib/jvm/java-8-oracleENV PATH $JAVA_HOME/bin:$PATHRUN apt-get cleanRUN rm -rf /var/lib/apt/listsRUN rm -rf /var/cache/oracle-jdk${JAVA_VER}-installer# 安装Gradle，Gradle的源原件需要手工下载，速度更快RUN curl -o /tmp/gradle.zip https://services.gradle.org/distributions/gradle-3.4.1-bin.zipADD gradle-3.4.1 /usr/local/gradleENV GRADLE_HOME /usr/local/gradleENV PATH $PATH:$GRADLE_HOME/bin# 为gitlab-runner用户增加docker权限RUN usermod -aG docker gitlab-runnerCOPY entrypoint /RUN chmod +x /entrypointVOLUME [&quot;/etc/gitlab-runner&quot;, &quot;/home/gitlab-runner&quot;]ENTRYPOINT [&quot;/usr/bin/dumb-init&quot;, &quot;/entrypoint&quot;]CMD [&quot;run&quot;, &quot;--user=gitlab-runner&quot;, &quot;--working-directory=/home/gitlab-runner&quot;]</code></pre><h2 id="运行-Use-Docker-socket-binding"><a href="#运行-Use-Docker-socket-binding" class="headerlink" title="运行 Use Docker socket binding"></a>运行 Use Docker socket binding</h2><pre><code>docker run --name gitlab-runner -d -v /data/gitlab-ci/config:/etc/gitlab-runner/ -v /var/run/docker.sock:/var/run/docker.sock c0cacb75b262</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#use-docker-in-docker-executor" target="_blank" rel="external">https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#use-docker-in-docker-executor</a></li><li><a href="https://docs.gitlab.com/runner/install/" target="_blank" rel="external">https://docs.gitlab.com/runner/install/</a></li><li><a href="https://hub.docker.com/r/sameersbn/gitlab/" target="_blank" rel="external">https://hub.docker.com/r/sameersbn/gitlab/</a></li><li><a href="https://docs.gitlab.com/runner/commands/README.html" target="_blank" rel="external">https://docs.gitlab.com/runner/commands/README.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流程图&quot;&gt;&lt;a href=&quot;#流程图&quot; class=&quot;headerlink&quot; title=&quot;流程图&quot;&gt;&lt;/a&gt;流程图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o6qknsods.bkt.clouddn.com/markdown-3a734ea26c4fbb
      
    
    </summary>
    
    
      <category term=" - 持续集成 - Gitlab" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>GitLab持续集成之.gitlab-ci.yml配置实例</title>
    <link href="http://yoursite.com/2017/05/02/gitlab-e6-8c-81-e7-bb-ad-e9-9b-86-e6-88-90-e4-b9-8b-gitlab-ci-yml-e9-85-8d-e7-bd-ae-e5-ae-9e-e4-be-8b/"/>
    <id>http://yoursite.com/2017/05/02/gitlab-e6-8c-81-e7-bb-ad-e9-9b-86-e6-88-90-e4-b9-8b-gitlab-ci-yml-e9-85-8d-e7-bd-ae-e5-ae-9e-e4-be-8b/</id>
    <published>2017-05-02T15:40:15.000Z</published>
    <updated>2017-06-17T13:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">variables: # 对应阿里云镜像仓库的namespace，全局唯一 </div><div class="line">GROUP: &quot;name&quot; PROJECT: &quot;project&quot; </div><div class="line"># 定义 stages pipeline顺序执行 </div><div class="line">stages:</div><div class="line">    - build </div><div class="line">    - test </div><div class="line">    - deploy </div><div class="line">build: </div><div class="line">    stage: build </div><div class="line">    #只允许构建的分支 </div><div class="line">    only: develop </div><div class="line">    #执行shell命令 </div><div class="line">    script: </div><div class="line">        - cd belgrade </div><div class="line">        - rm -rf build </div><div class="line">        - /usr/local/gradle/bin/gradle build --info </div><div class="line">        ## 构建镜像 </div><div class="line">        - sudo docker build -t &quot;$GROUP/$PROJECT:develop&quot; .</div><div class="line">        - sudo docker tag $GROUP/$PROJECT:develop registerUrl/$GROUP/$PROJECT:develop </div><div class="line">        - echo &apos;build done!&apos; </div><div class="line">andTest: </div><div class="line">     stage: test </div><div class="line">     only: - develop </div><div class="line">     script: </div><div class="line">         - echo &apos;test done!&apos; </div><div class="line">andPush: </div><div class="line">    stage: deploy </div><div class="line">    only: - develop </div><div class="line">    script: </div><div class="line">        #推送镜像到docker私仓 </div><div class="line">        - sudo docker push registerUrl/$GROUP/$PROJECT:develop </div><div class="line">        - echo &apos;push done!&apos; #触发jenkins的deploy任务 </div><div class="line">        - curl -s -u username:password http://JENKINS_SERVER/joba/deplody-belgrade/build?token=YOUR_TOCKEN </div><div class="line">        - echo &apos;deplody done!&apos;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://docs.gitlab.com/ce/ci/yaml/" target="_blank" rel="external">https://docs.gitlab.com/ce/ci/yaml/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
      
    
    </summary>
    
    
      <category term=" - 持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins的远程trigger服务</title>
    <link href="http://yoursite.com/2017/05/02/jenkins-e7-9a-84-e8-bf-9c-e7-a8-8btrigger-e6-9c-8d-e5-8a-a1/"/>
    <id>http://yoursite.com/2017/05/02/jenkins-e7-9a-84-e8-bf-9c-e7-a8-8btrigger-e6-9c-8d-e5-8a-a1/</id>
    <published>2017-05-02T15:30:28.000Z</published>
    <updated>2017-06-07T14:59:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p> 在需要被执行的job的构建触发器中选择触发远程构建 (例如,使用脚本)： <img src="http://o6qknsods.bkt.clouddn.com/markdown-45fbcb836cd570c64855b5b132332a48.png-960.jpg" alt=""></p><p>###调用<br>    curl -s -u username:password <a href="http://CI_SERVER/jobs/jobname/build?token=TOKEN" target="_blank" rel="external">http://CI_SERVER/jobs/jobname/build?token=TOKEN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt; 在需要被执行的job的构建触发器中选择触发远程构建 (例如,使用脚本)： &lt;img src=&quot;http://o6qknsods.bkt.c
      
    
    </summary>
    
    
      <category term=" - Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>如何恢复在Git节点游离状态（detached HEAD）后的commit记录</title>
    <link href="http://yoursite.com/2017/03/23/-e5-a6-82-e4-bd-95-e6-81-a2-e5-a4-8d-e5-9c-a8git-e8-8a-82-e7-82-b9-e6-b8-b8-e7-a6-bb-e7-8a-b6-e6-80-81-ef-bc-88detached-head-ef-bc-89-e5-90-8e-e7-9a-8/"/>
    <id>http://yoursite.com/2017/03/23/-e5-a6-82-e4-bd-95-e6-81-a2-e5-a4-8d-e5-9c-a8git-e8-8a-82-e7-82-b9-e6-b8-b8-e7-a6-bb-e7-8a-b6-e6-80-81-ef-bc-88detached-head-ef-bc-89-e5-90-8e-e7-9a-8/</id>
    <published>2017-03-22T20:27:51.000Z</published>
    <updated>2017-06-07T14:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>游离状态（detached HEAD）：不指向任何分支的HEAD节点，并且可以在上面进行commit操作</p></blockquote><h3 id="记录今天遇到的一个状况以及事后的解决方案"><a href="#记录今天遇到的一个状况以及事后的解决方案" class="headerlink" title="记录今天遇到的一个状况以及事后的解决方案"></a>记录今天遇到的一个状况以及事后的解决方案</h3><p> 在<code>detached HEAD</code>状态下进行了<code>commit</code>操作，此时无法<code>push</code>到任何仓库，由于没太注意当前的分支状态就<code>checkout</code>到其他分支，之前的修改一并消失了。 为了找回“宝贵的记录”，查阅资料，寻得了恢复记录的办法如下： </p><ol><li><p>利用<code>git reflog</code>命令，可以查看所有分支的所有操作记录（包括commit和reset的操作），查找最近十次commit记录： git reflog show HEAD@{now} -10</p></li><li><p>将游离状态的节点指向新建分支： git branch newBranch 37fdae9421</p></li><li><p>合并这个新分支到你想要的地方，ok记录回来了。Thanks God。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;游离状态（detached HEAD）：不指向任何分支的HEAD节点，并且可以在上面进行commit操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;记录今天遇到的一个状况以及事后的解决方案&quot;&gt;&lt;a href=&quot;#记录今天遇到的一个状况以及
      
    
    </summary>
    
    
      <category term=" - Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Gradle构建区分环境的编译打包</title>
    <link href="http://yoursite.com/2017/03/18/gradle-e6-9e-84-e5-bb-ba-e5-8c-ba-e5-88-86-e7-8e-af-e5-a2-83-e7-9a-84-e7-bc-96-e8-af-91-e6-89-93-e5-8c-85/"/>
    <id>http://yoursite.com/2017/03/18/gradle-e6-9e-84-e5-bb-ba-e5-8c-ba-e5-88-86-e7-8e-af-e5-a2-83-e7-9a-84-e7-bc-96-e8-af-91-e6-89-93-e5-8c-85/</id>
    <published>2017-03-17T22:39:55.000Z</published>
    <updated>2017-06-16T05:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据WAR包的用途，有三个命令：</p></blockquote><p> 一、发布生产的版本：<strong>adminstock-{version}.{build_version}-RELEASE.war</strong>gradle clean release</p><p> 二、本地调试版本：<strong>adminstock-{version}.war</strong> （不带编译次数，便于IDEA指定路径） gradle clean war</p><p> 三、快照版本：<strong>adminstock-{version}.{build_version}-SNAPSHOT.war</strong>gradle clean snapshop</p><h3 id="默认情况下"><a href="#默认情况下" class="headerlink" title="默认情况下:"></a>默认情况下:</h3><p> 只有发布Release版本会读取<strong><em>resources-prod</em></strong> 下的配置, 本地测试和快照版本读取<strong><em>resources-dev</em></strong>的配置， <strong><em>resources</em></strong>目录放各个环境的通用配置 &gt; gradle.properties 维护版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">version：1.0.2 //当前版本号</div><div class="line">build_version: 1//当前构建号</div><div class="line"></div><div class="line">只有发布生产版本时，构建号才会累加</div></pre></td></tr></table></figure><h2 id="具体实施build-gradle"><a href="#具体实施build-gradle" class="headerlink" title="具体实施build.gradle"></a>具体实施build.gradle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;maven&apos; </div><div class="line">apply plugin: &apos;war&apos; </div><div class="line">apply plugin: &apos;idea&apos; </div><div class="line">group = &apos;com.iwannarun.demo&apos; </div><div class="line">compileJava.options.encoding = &apos;UTF-8&apos; </div><div class="line">sourceCompatibility = 1.8 </div><div class="line">// 设置默认 resources 为开发环境状态 </div><div class="line">// 这儿如果不设置的话，idea 编译时只会默认获取 resources 目录（dao映射的xml也需要加入） </div><div class="line">sourceSets</div><div class="line"> &#123; </div><div class="line">main &#123; </div><div class="line">resources &#123; </div><div class="line">srcDirs = [&apos;src/main/java&apos;,&apos;src/main/resources&apos;, &apos;src/main/resources-dev&apos;]</div><div class="line"> &#125;</div><div class="line"> &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">repositories &#123; </div><div class="line">//依赖查找顺序：本地-&gt;私仓-&gt;阿里云-&gt;官方 </div><div class="line">mavenLocal() </div><div class="line">maven &#123; url &quot;http://yourrepository/nexus/repository/&quot; &#125; </div><div class="line">maven &#123;url &quot;http://maven.aliyun.com/nexus/content/groups/public&quot; &#125; </div><div class="line">mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"> dependencies &#123; //以下是项目依赖的第三方库，简化了maven中的dependencie compile group: &apos;org.apache.httpcomponents&apos;, name: &apos;httpcore&apos;, version:&apos;4.4&apos; compile group: &apos;com.github.pagehelper&apos;, name: &apos;pagehelper&apos;, version:&apos;3.6.3&apos; compile group: &apos;dom4j&apos;, name: &apos;dom4j&apos;, version:&apos;1.6.1&apos; compile group: &apos;jaxen&apos;, name: &apos;jaxen&apos;, version:&apos;1.1.6&apos; compile group: &apos;org.bouncycastle&apos;, name: &apos;bcprov-jdk15on&apos;, version:&apos;1.47&apos; compile group: &apos;jstl&apos;, name: &apos;jstl&apos;, version:&apos;1.2&apos; compile group: &apos;taglibs&apos;, name: &apos;standard&apos;, version:&apos;1.1.2&apos; compile group: &apos;org.jibx&apos;, name: &apos;jibx-run&apos;, version:&apos;1.2&apos; compile group: &apos;org.jdom&apos;, name: &apos;jdom&apos;, version:&apos;1.1.3&apos; compile group: &apos;jsch&apos;, name: &apos;jsch&apos;, version:&apos;0.1.29&apos; compile group: &apos;xpp3&apos;, name: &apos;xpp3&apos;, version:&apos;1.1.3.4.O&apos; compile group: &apos;commons-lang&apos;, name: &apos;commons-lang&apos;, version:&apos;2.4&apos; compile group: &apos;commons-beanutils&apos;, name: &apos;commons-beanutils&apos;, version:&apos;1.8.3&apos; compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-core&apos;, version:&apos;2.1.0&apos; compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-databind&apos;, version:&apos;2.1.0&apos; compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-annotations&apos;, version:&apos;2.1.0&apos; compile group: &apos;commons-fileupload&apos;, name: &apos;commons-fileupload&apos;, version:&apos;1.3&apos; compile group: &apos;commons-httpclient&apos;, name: &apos;commons-httpclient&apos;, version:&apos;3.0.1&apos; compile group: &apos;com.baidu.ueditor&apos;, name: &apos;ueditor&apos;, version:&apos;1.1.0&apos; compile(group: &apos;org.springframework.data&apos;, name: &apos;spring-data-mongodb&apos;, version:&apos;1.9.2.RELEASE&apos;) &#123; //排除冲突的依赖 exclude(module: &apos;spring-core&apos;) exclude(module: &apos;spring-tx&apos;) exclude(module: &apos;spring-context&apos;) exclude(module: &apos;spring-beans&apos;) exclude(module: &apos;spring-expression&apos;) &#125; compile group: &apos;com.aliyun&apos;, name: &apos;oss&apos;, version:&apos;2.2.3&apos; &#125; </div><div class="line"></div><div class="line"></div><div class="line"> ext &#123; </div><div class="line"></div><div class="line"> /**用于记录编译的次数 * 项目中调用，用于生成编译数字，此数字可以作为版本号的一个组成部分。 </div><div class="line"> * * 存储位置为子项目下的 build_number.properties,此文件与项目的 build.gradle 平级 </div><div class="line"> */ </div><div class="line">buildNumberIncrease = &#123;</div><div class="line"> def versionPropsFile = new File(&apos;gradle.properties&apos;) </div><div class="line"> if (versionPropsFile.canRead()) &#123; </div><div class="line"> Properties versionProps = new Properties() </div><div class="line"> versionProps.load(new FileInputStream(versionPropsFile))</div><div class="line"> def buildNumber = versionProps[&apos;build_version&apos;].toInteger() </div><div class="line"> println &apos;-- Old build number: &apos; + buildNumber</div><div class="line"> buildNumber++ println &apos;-- New build number: &apos; + buildNumber </div><div class="line"> def runTasks = gradle.startParameter.taskNames</div><div class="line"> //如果是发布模式，才对build进行自增 </div><div class="line"> if (&apos;release&apos; in runTasks) &#123; </div><div class="line"> versionProps[&apos;build_version&apos;] = (buildNumber).toString() </div><div class="line"> versionProps.store(versionPropsFile.newWriter(), null) &#125; </div><div class="line"> return buildNumber </div><div class="line"> &#125; else &#123; </div><div class="line"> throw new GradleException(&quot;Could not read version.properties!&quot;) </div><div class="line"> &#125; </div><div class="line"></div><div class="line"> &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line">// 设置 快照版本snapshot war 版本号 </div><div class="line">// 格式为：adminstock-&#123;version&#125;.&#123;x&#125;-SNAPSHOT.war task </div><div class="line">setSnapshotWarVersion &lt;&lt; &#123; </div><div class="line">println &apos;== Snapshot begin....&apos; </div><div class="line">def buildNumber = buildNumberIncrease() </div><div class="line">version += &apos;.&apos; + buildNumber </div><div class="line">version += &apos;-SNAPSHOT&apos; println &apos;-- Snapshot version: &apos; + version</div><div class="line">&#125; </div><div class="line">// 设置 release 包的版本号 </div><div class="line">// 格式为: adminstock-&#123;version&#125;.&#123;build_version&#125;-RELEASE.war </div><div class="line">// version 为大的版本号 build_version为当前构建号（只在release发布模式下会自增） </div><div class="line"></div><div class="line">task setReleaseWarVersion &lt;&lt; &#123; </div><div class="line"> println &apos;== Release Begin...&apos; </div><div class="line"> def buildNumber = buildNumberIncrease() </div><div class="line"> version += &apos;.&apos; + buildNumber version += &apos;-RELEASE&apos; </div><div class="line"> // 设置资源文件夹</div><div class="line"> sourceSets &#123; </div><div class="line">main &#123; </div><div class="line">resources &#123; </div><div class="line">srcDirs = [&quot;src/main/resources&quot;, &quot;src/main/resources-prod&quot;] </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">println &apos;-- Release version: &apos; + version </div><div class="line">&#125; </div><div class="line">//发布war包共有一下三个命令： </div><div class="line">//命令一： clean war ===&gt; 默认读取resource-dev下的配置 </div><div class="line">//命令二：clean release </div><div class="line">// 编译发布用的 war 包 ===&gt;读取resource-prod下的配置 </div><div class="line">task release(dependsOn: [&apos;setReleaseWarVersion&apos;, &apos;war&apos;]) &lt;&lt; &#123; </div><div class="line">println &apos;== Release WAR Generate Over&apos; </div><div class="line">&#125; </div><div class="line">//命令三：clean snapshot </div><div class="line">// 编译快照版的 war 包 ===&gt; 读取resource-dev下的配置 </div><div class="line">task snapshot(dependsOn: [&apos;setSnapshotWarVersion&apos;, &apos;war&apos;]) &lt;&lt; &#123; </div><div class="line">println &apos;== Snapshot WAR Generate Over&apos; </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;根据WAR包的用途，有三个命令：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 一、发布生产的版本：&lt;strong&gt;adminstock-{version}.{build_version}-RELEASE.war&lt;/strong&gt;gradle cle
      
    
    </summary>
    
    
      <category term=" - Gradle - 构建工具" scheme="http://yoursite.com/tags/Gradle-%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Maven工程自动转换Gradle构建的方式</title>
    <link href="http://yoursite.com/2017/03/18/maven-e5-b7-a5-e7-a8-8b-e8-87-aa-e5-8a-a8-e8-bd-ac-e6-8d-a2gradle-e6-9e-84-e5-bb-ba-e7-9a-84-e6-96-b9-e5-bc-8f/"/>
    <id>http://yoursite.com/2017/03/18/maven-e5-b7-a5-e7-a8-8b-e8-87-aa-e5-8a-a8-e8-bd-ac-e6-8d-a2gradle-e6-9e-84-e5-bb-ba-e7-9a-84-e6-96-b9-e5-bc-8f/</id>
    <published>2017-03-17T22:21:02.000Z</published>
    <updated>2017-06-07T15:09:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近有个Maven工程转Gradle构建的需求，记录一下：</p></blockquote><h3 id="Gradle安装"><a href="#Gradle安装" class="headerlink" title="Gradle安装"></a>Gradle安装</h3><p>Mac下可以选择brew或SDKMAN安装（官方推荐） </p><pre><code>brew install gradlesdk install gradle 3.4.1&apos;</code></pre><h3 id="Maven转Gradle"><a href="#Maven转Gradle" class="headerlink" title="Maven转Gradle"></a>Maven转Gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle init --type pom</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近有个Maven工程转Gradle构建的需求，记录一下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Gradle安装&quot;&gt;&lt;a href=&quot;#Gradle安装&quot; class=&quot;headerlink&quot; title=&quot;Gradle安装&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term=" - Gradle - Maven - 构建工具 - 效率工具" scheme="http://yoursite.com/tags/Gradle-Maven-%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7-%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>GitHub通过SS代理加速</title>
    <link href="http://yoursite.com/2017/03/17/github-e9-80-9a-e8-bf-87ss-e4-bb-a3-e7-90-86-e5-8a-a0-e9-80-9f/"/>
    <id>http://yoursite.com/2017/03/17/github-e9-80-9a-e8-bf-87ss-e4-bb-a3-e7-90-86-e5-8a-a0-e9-80-9f/</id>
    <published>2017-03-17T11:01:24.000Z</published>
    <updated>2017-06-07T15:03:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>###设置代理仅对github.com有效</p><p><code>git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</code></p><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><p><code>git config --global --unset http.https://github.com.proxy</code></p><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;</div><div class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###设置代理仅对github.com有效&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global http.https://github.com.proxy socks5://127.0.0.1:1080&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;取消代理&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term=" - Git - 效率工具" scheme="http://yoursite.com/tags/Git-%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Firewalld的基本使用</title>
    <link href="http://yoursite.com/2017/03/08/firewalld-e7-9a-84-e5-9f-ba-e6-9c-ac-e4-bd-bf-e7-94-a8/"/>
    <id>http://yoursite.com/2017/03/08/firewalld-e7-9a-84-e5-9f-ba-e6-9c-ac-e4-bd-bf-e7-94-a8/</id>
    <published>2017-03-08T11:02:55.000Z</published>
    <updated>2017-06-07T15:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>启动： systemctl start firewalld </li><li>查看状态： systemctl status firewalld </li><li>停止： systemctl disable firewalld </li><li>禁用： systemctl stop firewalld</li></ul><blockquote><p>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</p></blockquote><ul><li>启动一个服务：systemctl start firewalld.service </li><li>关闭一个服务：systemctl stop firewalld.service</li><li>重启一个服务：systemctl restart firewalld.service </li><li>显示一个服务的状态：systemctl status firewalld.service 在开机时启用一个服务：systemctl enable firewalld.service 在开机时禁用一个服务：systemctl disable firewalld.service 查看服务是否开机启动：systemctl is-enabled firewalld.service </li><li>查看已启动的服务列表：systemctl list-unit-files|grep enabled </li><li><p>查看启动失败的服务列表：systemctl –failed </p><h1 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h1></li><li><p>查看版本： firewall-cmd –version </p></li><li>查看帮助： firewall-cmd –help </li><li>显示状态： firewall-cmd –state </li><li>查看所有打开的端口： firewall-cmd –zone=public –list-ports </li><li>更新防火墙规则： firewall-cmd –reload </li><li>查看区域信息: firewall-cmd –get-active-zones </li><li>查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0 </li><li>拒绝所有包：firewall-cmd –panic-on </li><li>取消拒绝状态： firewall-cmd –panic-off </li><li><p>看是否拒绝： firewall-cmd –query-panic </p><h1 id="开启指定端口呢"><a href="#开启指定端口呢" class="headerlink" title="开启指定端口呢"></a>开启指定端口呢</h1></li><li><p>添加 firewall-cmd –zone=public –add-port=80/tcp –permanent （–permanent永久生效，没有此参数重启后失效）</p></li><li>重新载入 firewall-cmd –reload </li><li>查看 firewall-cmd –zone= public –query-port=80/tcp </li><li>删除 firewall-cmd –zone= public –remove-port=80/tcp –permanent</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;启动： systemctl start firewalld &lt;/li&gt;
&lt;li&gt;查看状态： systemctl status firewalld &lt;/li&gt;
&lt;li&gt;停止： systemctl disable firewalld &lt;/li&gt;
&lt;li&gt;禁用： sy
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot与Docker镜像的快速构建</title>
    <link href="http://yoursite.com/2017/03/02/spring-boot--e4-b8-8edocker-e9-95-9c-e5-83-8f-e6-9e-84-e5-bb-ba-e4-b8-80-e6-ad-a5-e5-88-b0-e4-bd-8d/"/>
    <id>http://yoursite.com/2017/03/02/spring-boot--e4-b8-8edocker-e9-95-9c-e5-83-8f-e6-9e-84-e5-bb-ba-e4-b8-80-e6-ad-a5-e5-88-b0-e4-bd-8d/</id>
    <published>2017-03-01T23:43:04.000Z</published>
    <updated>2017-06-07T15:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在微服务场景下,SpringBoot和Docker镜像都具备”拆箱即用”的特点，将二者以maven插件进行结合,可以迅速构建出我们需要的微服务镜像，交由阿里云提供的镜像仓库集中管理分发。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>Docker环境</li><li>基于Maven的项目和docker-maven-plugin</li><li>阿里云私有仓库（registry.cn-hangzhou.aliyuncs.com）推荐用私网服务地址或VPC专用线路，更高效，且不耗费流量</li><li>熟悉Docker和Maven</li></ul><h2 id="1-配置pom-xml"><a href="#1-配置pom-xml" class="headerlink" title="1.配置pom.xml"></a>1.配置pom.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">   &lt;plugins&gt;</div><div class="line">        &lt;!--必须用springboot提供的编译插件，区别于传统maven插件，并且必须放在docker-maven-plugin的前面--&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.5.1.RELEASE&lt;/version&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;com.spotify&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;0.4.13&lt;/version&gt;</div><div class="line">            &lt;!--执行maven clean install的时候会顺带执行下面三个步骤，依次是：编译、制作镜像、发布镜像到私仓--&gt;</div><div class="line">            &lt;executions&gt;</div><div class="line">                &lt;execution&gt;</div><div class="line">                    &lt;phase&gt;package&lt;/phase&gt;</div><div class="line">                    &lt;goals&gt;</div><div class="line">                        &lt;goal&gt;build&lt;/goal&gt;</div><div class="line">                    &lt;/goals&gt;</div><div class="line">                &lt;/execution&gt;</div><div class="line">                &lt;execution&gt;</div><div class="line">                    &lt;id&gt;tag-image&lt;/id&gt;</div><div class="line">                    &lt;phase&gt;package&lt;/phase&gt;</div><div class="line">                    &lt;goals&gt;</div><div class="line">                        &lt;goal&gt;tag&lt;/goal&gt;</div><div class="line">                    &lt;/goals&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;image&gt;$&#123;docker.registry&#125;/$&#123;docker.prefix&#125;/$&#123;docker.base.profile&#125;:$&#123;project.build.finalName&#125;&lt;/image&gt;</div><div class="line">                        &lt;newName&gt;$&#123;docker.registry&#125;/$&#123;docker.prefix&#125;/$&#123;docker.base.profile&#125;:$&#123;project.build.finalName&#125;&lt;/newName&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/execution&gt;</div><div class="line">                &lt;execution&gt;</div><div class="line">                    &lt;id&gt;push-image&lt;/id&gt;</div><div class="line">                    &lt;phase&gt;deploy&lt;/phase&gt;</div><div class="line">                    &lt;goals&gt;</div><div class="line">                        &lt;goal&gt;push&lt;/goal&gt;</div><div class="line">                    &lt;/goals&gt;</div><div class="line">                    &lt;configuration&gt;</div><div class="line">                        &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;docker.prefix&#125;/$&#123;docker.base.profile&#125;:$&#123;project.build.finalName&#125;&lt;/imageName&gt;</div><div class="line">                    &lt;/configuration&gt;</div><div class="line">                &lt;/execution&gt;</div><div class="line">            &lt;/executions&gt;</div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 --&gt;</div><div class="line">                &lt;!--利用Maven提交服务密码加密的功能，添加镜像私仓的认证信息--&gt;</div><div class="line">                &lt;serverId&gt;docker-aliyun&lt;/serverId&gt;</div><div class="line">                &lt;registryUrl&gt;http://$&#123;docker.registry&#125;&lt;/registryUrl&gt;</div><div class="line">                &lt;imageName&gt;$&#123;docker.registry&#125;/$&#123;docker.prefix&#125;/$&#123;docker.base.profile&#125;&lt;/imageName&gt;</div><div class="line">                &lt;!--基础镜像如果本地不存在最好先手动pull一个，避免莫名其妙的问题--&gt;</div><div class="line">                &lt;baseImage&gt;$&#123;docker.registry&#125;/$&#123;docker.prefix&#125;/$&#123;docker.base.profile&#125;:$&#123;docker.base.image&#125;&lt;/baseImage&gt;</div><div class="line"></div><div class="line">                &lt;resources&gt;</div><div class="line">                    &lt;resource&gt;</div><div class="line">                        &lt;targetPath&gt;/&lt;/targetPath&gt;</div><div class="line">                        &lt;!--指定为/src/main/docker目录后jar包和生成的Dockerfile文件都会放到这里--&gt;</div><div class="line">                        &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</div><div class="line">                        &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</div><div class="line">                    &lt;/resource&gt;</div><div class="line">                &lt;/resources&gt;</div><div class="line">                &lt;exposes&gt;</div><div class="line">                    &lt;!--默认需要暴露的端口--&gt;</div><div class="line">                    &lt;expose&gt;8080&lt;/expose&gt;</div><div class="line">                &lt;/exposes&gt;</div><div class="line">                &lt;!--容器启动脚本--&gt;</div><div class="line">                &lt;cmd&gt;[&amp;quot;java&amp;quot;, &amp;quot;-jar –spring.active.profile=$&#123;cfg_dir&#125;&amp;quot;, &amp;quot;/$&#123;project.build.finalName&#125;.jar&amp;quot;]&lt;/cmd&gt;</div><div class="line">                &lt;imageTags&gt;</div><div class="line">                    &lt;!--docker的tag为项目版本号、latest--&gt;</div><div class="line">                    &lt;imageTag&gt;$&#123;project.artifactId&#125;&lt;/imageTag&gt;</div><div class="line">                &lt;/imageTags&gt;</div><div class="line"></div><div class="line">                 &lt;!--install阶段也上传，否则只有deploy阶段上传--&gt;</div><div class="line">                &lt;pushImage&gt;true&lt;/pushImage&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure><h2 id="2-settings-xml配置私有库的访问"><a href="#2-settings-xml配置私有库的访问" class="headerlink" title="2.settings.xml配置私有库的访问"></a>2.settings.xml配置私有库的访问</h2><p>首先使用你的私有仓库访问密码生成主密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn --encrypt-master-password &lt;password&gt;</div></pre></td></tr></table></figure><p>其次在settings.xml文件的同级目录创建settings-security.xml文件，将主密码写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;settingsSecurity&gt;</div><div class="line">  &lt;master&gt;&#123;asd7G5J?SD*****************=&#125;&lt;/master&gt;</div><div class="line">&lt;/settingsSecurity&gt;</div></pre></td></tr></table></figure><p>最后使用你的私有仓库访问密码生成服务密码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn --encrypt-password &lt;password&gt;</div></pre></td></tr></table></figure><p>将生成的密码写入到settings.xml的servers中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;server&gt;</div><div class="line">      &lt;id&gt;docker-aliyun&lt;/id&gt;</div><div class="line">      &lt;username&gt;iwannarungg@gmail.com&lt;/username&gt;</div><div class="line">      &lt;password&gt;&#123;D9YIyWYvtYsHayLjIenj***********=&#125;&lt;/password&gt;</div><div class="line">      &lt;configuration&gt;</div><div class="line">        &lt;email&gt;iwannarungg@gmail.com&lt;/email&gt;</div><div class="line">      &lt;/configuration&gt;</div><div class="line">    &lt;/server&gt;</div></pre></td></tr></table></figure><p>更多settings.xml配置参考：<a href="http://maven.apache.org/ref/3.3.9/maven-settings/settings.html" target="_blank" rel="external">http://maven.apache.org/ref/3.3.9/maven-settings/settings.html</a></p><p>**注意:settings.xml和settings-security.xml必须放在<code>~/.m2/</code>路径下面，否则生成的私仓认证信息会无效</p><h2 id="3-执行maven-install"><a href="#3-执行maven-install" class="headerlink" title="3.执行maven install"></a>3.执行<code>maven install</code></h2><p>如果<code>&lt;pushimage&gt;false&lt;/pushimage&gt;</code>则install阶段将不提交Docker镜像，只有maven的deploy阶段才提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean install -Dmaven.test.skip=true -s ~/.m2/settings.xml</div></pre></td></tr></table></figure><p>之后，镜像会被推送到阿里云镜像仓库中,镜像。</p><h1 id="TIPS多环境镜像区分"><a href="#TIPS多环境镜像区分" class="headerlink" title="TIPS多环境镜像区分:"></a>TIPS多环境镜像区分:</h1><p>真实开发中我们往往需要针对不同的环境设定不同的配置信息，需要一个一键切换环境的方式去构建不同环境版本的镜像。这里可以利用以下几个性质： - 如果Dockerfile文件需要maven构建参数（比如需要构建后的打包文件名等），则使用@@占位符（如<code>@project.build.finalName@</code>）原因是Sping Boot 的pom将resource插件的占位符由${}改为@@，非继承Spring Boot 的pom文件，则使用${}占位符。 - Spring Boot项目中yml配置文件读取pom.xml属性时也是通过@@占位符读取。另外<code>spring.profile.active</code>与Maven的profile可以很好的结合起来，以<code>maven install -P [dev/test/pro]</code>对应的激活s<code>pring.profile.active=[dev/test/pro]</code>属性的目的。</p><h2 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h2><p>定义多个application-xxx.yml（比如测试环境可以是application-test.yml）,和一个公共的application.yml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line"> profiles:</div><div class="line">  active: @maven_active_profile@</div><div class="line">  ...</div><div class="line">//这里还可以配置不同环境中公共部分配置，如服务暴露地址等</div><div class="line">sms_push_url: /sms/push</div><div class="line">  ...</div></pre></td></tr></table></figure><p>然后在pom.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;profiles&gt;</div><div class="line">        &lt;profile&gt;</div><div class="line">            &lt;id&gt;test&lt;/id&gt;</div><div class="line">            &lt;properties&gt;</div><div class="line">                &lt;maven_active_profile&gt;test&lt;/maven_active_profile&gt;</div><div class="line">            &lt;/properties&gt;</div><div class="line">                 &lt;profile/&gt;</div><div class="line">                 &lt;profile&gt;</div><div class="line">            &lt;id&gt;product&lt;/id&gt;</div><div class="line">            &lt;properties&gt;</div><div class="line">                &lt;maven_active_profile&gt;product&lt;/maven_active_profile&gt;</div><div class="line">            &lt;/properties&gt;</div><div class="line">                 &lt;profile/&gt;</div><div class="line">&lt;profiles/&gt;</div></pre></td></tr></table></figure><h3 id="多环境镜像生成"><a href="#多环境镜像生成" class="headerlink" title="多环境镜像生成"></a>多环境镜像生成</h3><p><code>mvn clean install -P product</code>就可以激活application.xml中<code>spring.profile.active=product</code>的配置,然后生成对应环境的镜像，再阿里云镜像仓库的namespace划分仓库，利用镜像的tag可以很好对镜像进行版本管理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在微服务场景下,SpringBoot和Docker镜像都具备”拆箱即用”的特点，将二者以maven插件进行结合,可以迅速构建出我们需要的微服务镜像，交由阿里云提供的镜像仓库集中管理分发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备工作
      
    
    </summary>
    
    
      <category term=" - Java - SpringBoot - Docker - Gradle" scheme="http://yoursite.com/tags/Java-SpringBoot-Docker-Gradle/"/>
    
  </entry>
  
</feed>
